{
  "Google Apps Script Main Function": {
    "prefix": "gas-main",
    "body": [
      "/**",
      " * Ultra Sports Betting System - ${1:Sport} Module",
      " * Main entry point for Google Apps Script integration",
      " */",
      "",
      "// Configuration",
      "const CONFIG = {",
      "  apiBaseUrl: '${2:https://your-api-url.com}',",
      "  sportName: '${3:sport}',",
      "  updateInterval: 300000, // 5 minutes",
      "  maxRetries: 3",
      "};",
      "",
      "/**",
      " * Main function to refresh ${1:Sport} data",
      " */",
      "function refresh${1:Sport}Data() {",
      "  try {",
      "    const sheet = SpreadsheetApp.getActiveSheet();",
      "    const data = fetchSportsData(CONFIG.sportName);",
      "    ",
      "    if (data && data.length > 0) {",
      "      updateSheet(sheet, data);",
      "      Logger.log(`${1:Sport} data updated successfully`);",
      "    }",
      "  } catch (error) {",
      "    Logger.log(`Error refreshing ${1:Sport} data: ` + error.toString());",
      "  }",
      "}",
      "",
      "/**",
      " * Fetch sports data from API",
      " */",
      "function fetchSportsData(sport) {",
      "  const url = `\\${CONFIG.apiBaseUrl}/api/\\${sport}/games`;",
      "  const response = UrlFetchApp.fetch(url);",
      "  return JSON.parse(response.getContentText());",
      "}",
      "",
      "/**",
      " * Update spreadsheet with new data",
      " */",
      "function updateSheet(sheet, data) {",
      "  // Clear existing data (except headers)",
      "  if (sheet.getLastRow() > 1) {",
      "    sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).clear();",
      "  }",
      "  ",
      "  // Add new data",
      "  if (data.length > 0) {",
      "    const range = sheet.getRange(2, 1, data.length, Object.keys(data[0]).length);",
      "    const values = data.map(row => Object.values(row));",
      "    range.setValues(values);",
      "  }",
      "}",
      "",
      "/**",
      " * Set up automatic triggers",
      " */",
      "function setupTriggers() {",
      "  // Delete existing triggers",
      "  const triggers = ScriptApp.getProjectTriggers();",
      "  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));",
      "  ",
      "  // Create new trigger for periodic updates",
      "  ScriptApp.newTrigger('refresh${1:Sport}Data')",
      "    .timeBased()",
      "    .everyMinutes(5)",
      "    .create();",
      "}"
    ],
    "description": "Create a complete Google Apps Script main function for a sport"
  },
  "GAS API Helper": {
    "prefix": "gas-api-helper",
    "body": [
      "/**",
      " * API Helper functions for Ultra Sports Betting System",
      " */",
      "",
      "/**",
      " * Make authenticated API request",
      " * @param {string} endpoint - API endpoint",
      " * @param {string} method - HTTP method",
      " * @param {Object} payload - Request payload",
      " * @return {Object} API response",
      " */",
      "function makeApiRequest(endpoint, method = 'GET', payload = null) {",
      "  const options = {",
      "    method: method,",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "      'Authorization': 'Bearer ' + getApiKey()",
      "    }",
      "  };",
      "  ",
      "  if (payload && method !== 'GET') {",
      "    options.payload = JSON.stringify(payload);",
      "  }",
      "  ",
      "  try {",
      "    const response = UrlFetchApp.fetch(CONFIG.apiBaseUrl + endpoint, options);",
      "    return JSON.parse(response.getContentText());",
      "  } catch (error) {",
      "    Logger.log('API request failed: ' + error.toString());",
      "    throw error;",
      "  }",
      "}",
      "",
      "/**",
      " * Get API key from properties",
      " * @return {string} API key",
      " */",
      "function getApiKey() {",
      "  const properties = PropertiesService.getScriptProperties();",
      "  return properties.getProperty('API_KEY');",
      "}",
      "",
      "/**",
      " * Set API key in properties",
      " * @param {string} apiKey - API key to store",
      " */",
      "function setApiKey(apiKey) {",
      "  const properties = PropertiesService.getScriptProperties();",
      "  properties.setProperty('API_KEY', apiKey);",
      "}",
      "",
      "/**",
      " * Format data for Google Sheets",
      " * @param {Array} data - Raw data array",
      " * @return {Array} Formatted data for sheets",
      " */",
      "function formatDataForSheets(data) {",
      "  if (!data || data.length === 0) return [];",
      "  ",
      "  return data.map(item => {",
      "    // Convert objects to sheet-friendly format",
      "    const formatted = {};",
      "    Object.keys(item).forEach(key => {",
      "      if (typeof item[key] === 'object' && item[key] !== null) {",
      "        formatted[key] = JSON.stringify(item[key]);",
      "      } else {",
      "        formatted[key] = item[key];",
      "      }",
      "    });",
      "    return formatted;",
      "  });",
      "}"
    ],
    "description": "Create API helper functions for Google Apps Script"
  }
}